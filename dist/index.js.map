{
  "version": 3,
  "sources": ["../lib/prng.js", "../lib/main.js", "../lib/ndarray.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar random = require( '@stdlib/random-base-exponential' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 1;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = clbk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided-base-nullary' );\nvar unary = require( '@stdlib/strided-base-unary' );\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an exponential distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} lambda - rate parameter\n* @param {integer} sl - `lambda` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential( out.length, [ 2.0 ], 0, out, 1 );\n*/\nfunction exponential( N, lambda, sl, out, so, options ) {\n\tvar rand = prng( lambda, sl, 0, arguments.length > 5, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tunary( [ lambda, out ], [ N ], [ sl, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponential;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nullary = require( '@stdlib/strided-base-nullary' ).ndarray;\nvar unary = require( '@stdlib/strided-base-unary' ).ndarray;\nvar prng = require( './prng.js' );\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an exponential distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} lambda - scale parameter\n* @param {integer} sl - `lambda` stride length\n* @param {NonNegativeInteger} ol - starting `lambda` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\nfunction exponential( N, lambda, sl, ol, out, so, oo, options ) {\n\tvar rand = prng( lambda, sl, ol, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tunary( [ lambda, out ], [ N ], [ sl, so ], [ ol, oo ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponential;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from an exponential distribution.\n*\n* @module @stdlib/random-strided-exponential\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var exponential = require( '@stdlib/random-strided-exponential' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var exponential = require( '@stdlib/random-strided-exponential' );\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAkB,QAAS,6CAA8C,EACzEC,EAAS,QAAS,iCAAkC,EAuBxD,SAASC,EAAMC,EAAGC,EAAIC,EAAIC,EAAYC,EAAU,CAC/C,IAAIC,EACAC,EAMJ,GAJAD,EAAM,CACL,MAAS,EACT,IAAO,IACR,EACKF,EAAa,CACjB,GAAKF,IAAO,EACX,OAAKJ,EAAiBG,CAAE,EACvBM,EAAKN,EAAE,IAAKE,CAAG,EAEfI,EAAKN,EAAGE,CAAG,EAEZG,EAAI,IAAMP,EAAO,QAASQ,EAAIF,CAAQ,EAC/BC,EAERA,EAAI,IAAMP,EAAO,QAASM,CAAQ,CACnC,MACCC,EAAI,IAAMP,EAEX,OAAAO,EAAI,OAAS,EACNA,CACR,CAKAT,EAAO,QAAUG,IC3EjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,8BAA+B,EAClDC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAO,IAgCX,SAASC,EAAaC,EAAGC,EAAQC,EAAIC,EAAKC,EAAIC,EAAU,CACvD,IAAIC,EAAOR,EAAMG,EAAQC,EAAI,EAAG,UAAU,OAAS,EAAGG,CAAQ,EAC9D,OAAKC,EAAK,QAAU,GACnBV,EAAS,CAAEO,CAAI,EAAG,CAAEH,CAAE,EAAG,CAAEI,CAAG,EAAGE,EAAK,GAAI,EACnCH,IAERN,EAAO,CAAEI,EAAQE,CAAI,EAAG,CAAEH,CAAE,EAAG,CAAEE,EAAIE,CAAG,EAAGE,EAAK,GAAI,EAC7CH,EACR,CAKAR,EAAO,QAAUI,ICrEjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,8BAA+B,EAAE,QACpDC,EAAQ,QAAS,4BAA6B,EAAE,QAChDC,EAAO,IAkCX,SAASC,EAAaC,EAAGC,EAAQC,EAAIC,EAAIC,EAAKC,EAAIC,EAAIC,EAAU,CAC/D,IAAIC,EAAOV,EAAMG,EAAQC,EAAIC,EAAI,UAAU,OAAS,EAAGI,CAAQ,EAC/D,OAAKC,EAAK,QAAU,GACnBZ,EAAS,CAAEQ,CAAI,EAAG,CAAEJ,CAAE,EAAG,CAAEK,CAAG,EAAG,CAAEC,CAAG,EAAGE,EAAK,GAAI,EAC3CJ,IAERP,EAAO,CAAEI,EAAQG,CAAI,EAAG,CAAEJ,CAAE,EAAG,CAAEE,EAAIG,CAAG,EAAG,CAAEF,EAAIG,CAAG,EAAGE,EAAK,GAAI,EACzDJ,EACR,CAKAT,EAAO,QAAUI,ICvBjB,IAAIU,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_prng", "__commonJSMin", "exports", "module", "isAccessorArray", "random", "clbk", "x", "sx", "ox", "hasOptions", "options", "out", "v1", "require_main", "__commonJSMin", "exports", "module", "nullary", "unary", "prng", "exponential", "N", "lambda", "sl", "out", "so", "options", "rand", "require_ndarray", "__commonJSMin", "exports", "module", "nullary", "unary", "prng", "exponential", "N", "lambda", "sl", "ol", "out", "so", "oo", "options", "rand", "setReadOnly", "main", "ndarray"]
}
