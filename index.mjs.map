{"version":3,"file":"index.mjs","sources":["../lib/prng.js","../lib/main.js","../lib/ndarray.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport random from '@stdlib/random-base-exponential';\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 1;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default clbk;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nullary from '@stdlib/strided-base-nullary';\nimport unary from '@stdlib/strided-base-unary';\nimport prng from './prng.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an exponential distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} lambda - rate parameter\n* @param {integer} sl - `lambda` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential( out.length, [ 2.0 ], 0, out, 1 );\n*/\nfunction exponential( N, lambda, sl, out, so, options ) {\n\tvar rand = prng( lambda, sl, 0, arguments.length > 5, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tunary( [ lambda, out ], [ N ], [ sl, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default exponential;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as nullary } from '@stdlib/strided-base-nullary';\nimport { ndarray as unary } from '@stdlib/strided-base-unary';\nimport prng from './prng.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an exponential distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} lambda - scale parameter\n* @param {integer} sl - `lambda` stride length\n* @param {NonNegativeInteger} ol - starting `lambda` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} must provide valid distribution parameters\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\nfunction exponential( N, lambda, sl, ol, out, so, oo, options ) {\n\tvar rand = prng( lambda, sl, ol, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tunary( [ lambda, out ], [ N ], [ sl, so ], [ ol, oo ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default exponential;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from an exponential distribution.\n*\n* @module @stdlib/random-strided-exponential\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import exponential from '@stdlib/random-strided-exponential';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential( out.length, [ 2.0 ], 0, out, 1 );\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import exponential from '@stdlib/random-strided-exponential';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* exponential.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],"names":["clbk","x","sx","ox","hasOptions","options","out","v1","arity","fcn","isAccessorArray","get","random","factory","exponential","N","lambda","sl","so","rand","prng","arguments","length","nullary","unary","ol","oo","setReadOnly","main","ndarray"],"mappings":";;ogBA8CA,SAASA,EAAMC,EAAGC,EAAIC,EAAIC,EAAYC,GACrC,IAAIC,EACAC,EAMJ,GAJAD,EAAM,CACLE,MAAS,EACTC,IAAO,MAEHL,EAAa,CACjB,GAAY,IAAPF,EAOJ,OALCK,EADIG,EAAiBT,GAChBA,EAAEU,IAAKR,GAEPF,EAAGE,GAETG,EAAIG,IAAMG,EAAOC,QAASN,EAAIF,GACvBC,EAERA,EAAIG,IAAMG,EAAOC,QAASR,EAC5B,MACEC,EAAIG,IAAMG,EAGX,OADAN,EAAIE,OAAS,EACNF,CACR,CCdA,SAASQ,EAAaC,EAAGC,EAAQC,EAAIX,EAAKY,EAAIb,GAC7C,IAAIc,EAAOC,EAAMJ,EAAQC,EAAI,EAAGI,UAAUC,OAAS,EAAGjB,GACtD,OAAoB,IAAfc,EAAKX,OACTe,EAAS,CAAEjB,GAAO,CAAES,GAAK,CAAEG,GAAMC,EAAKV,KAC/BH,IAERkB,EAAO,CAAER,EAAQV,GAAO,CAAES,GAAK,CAAEE,EAAIC,GAAMC,EAAKV,KACzCH,EACR,CCNA,SAASQ,EAAaC,EAAGC,EAAQC,EAAIQ,EAAInB,EAAKY,EAAIQ,EAAIrB,GACrD,IAAIc,EAAOC,EAAMJ,EAAQC,EAAIQ,EAAIJ,UAAUC,OAAS,EAAGjB,GACvD,OAAoB,IAAfc,EAAKX,OACTe,EAAS,CAAEjB,GAAO,CAAES,GAAK,CAAEG,GAAM,CAAEQ,GAAMP,EAAKV,KACvCH,IAERkB,EAAO,CAAER,EAAQV,GAAO,CAAES,GAAK,CAAEE,EAAIC,GAAM,CAAEO,EAAIC,GAAMP,EAAKV,KACrDH,EACR,CCXAqB,EAAAC,EAAA,UAAAC"}